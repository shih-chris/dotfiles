-- Shout out to kickstart for the following code
return {
--   {
--     -- `lazydev` configures Lua LSP for your Neovim config, runtime and plugins
--     -- used for completion, annotations and signatures of Neovim apis
--     "folke/lazydev.nvim",
--     ft = "lua",
--     opts = {
--       library = {
--         -- Load luvit types when the `vim.uv` word is found
--         { path = "luvit-meta/library", words = { "vim%.uv" } },
--       },
--     },
--   },
--   { "Bilal2453/luvit-meta", lazy = true },
--   {
--     -- Main LSP Configuration
--     "neovim/nvim-lspconfig",
--     dependencies = {
--       -- Automatically install LSPs and related tools to stdpath for Neovim
--       { "williamboman/mason.nvim", config = true }, -- NOTE: Must be loaded before dependants
--       "williamboman/mason-lspconfig.nvim",
--       "WhoIsSethDaniel/mason-tool-installer.nvim",
--
--       -- Useful status updates for LSP.
--       -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
--       { "j-hui/fidget.nvim", opts = {} },
--       -- Allows extra capabilities provided by blink.cmp
--       "saghen/blink.cmp",
--     },
--     opts = {
--       servers = {
--         lua_ls = {
--           settings = {
--             Lua = {
--               completion = {
--                 callSnippet = "Replace",
--               },
--               diagnostics = { disable = { 'missing-fields' } },
--             },
--           },
--         },
--       },
--     },
--     config = function(_, opts)
--       vim.api.nvim_create_autocmd("LspAttach", {
--         group = vim.api.nvim_create_augroup("kickstart-lsp-attach", { clear = true }),
--         callback = function(event)
--           local map = function(keys, func, desc, mode)
--             mode = mode or "n"
--             vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
--           end
--
--           -- Jump to the definition of the word under your cursor.
--           --  This is where a variable was first declared, or where a function is defined, etc.
--           --  To jump back, press <C-t>.
--           map(
--             "gd",
--             "<cmd>FzfLua lsp_definitions jump_to_single_result=true ignore_current_line=true<cr>",
--             "[g]oto [d]efinition"
--           )
--
--           -- Find references for the word under your cursor.
--           map(
--             "gr",
--             "<cmd>FzfLua lsp_references jump_to_single_result=true ignore_current_line=true<cr>",
--             "[g]oto [r]eferences"
--           )
--
--           -- Jump to the implementation of the word under your cursor.
--           --  Useful when your language has ways of declaring types without an actual implementation.
--           map(
--             "gI",
--             "<cmd>FzfLua lsp_implementations jump_to_single_result=true ignore_current_line=true<cr>",
--             "[g]oto [i]mplementation"
--           )
--
--           -- Jump to the type of the word under your cursor.
--           --  Useful when you're not sure what type a variable is and you want to see
--           --  the definition of its *type*, not where it was *defined*.
--           map(
--             "<leader>cD",
--             "<cmd>FzfLua lsp_typedefs jump_to_single_result=true ignore_current_line=true<cr>",
--             "type [D]efinition"
--           )
--
--           -- Rename the variable under your cursor.
--           --  Most Language Servers support renaming across files, etc.
--           map("<leader>cr", vim.lsp.buf.rename, "lsp code [r]ename")
--
--           -- Execute a code action, usually your cursor needs to be on top of an error
--           -- or a suggestion from your LSP for this to activate.
--           map("<leader>ca", vim.lsp.buf.code_action, "code [a]ction", { "n", "x" })
--
--           --  Jumps to declaration
--           map(
--             "gD",
--             "<cmd>FzfLua lsp_declarations jump_to_single_result=true ignore_current_line=true<cr>",
--             "[g]oto [D]eclaration"
--           )
--         end,
--       })
--
--       -- Ensure the servers and tools above are installed
--       --  To check the current status of installed tools and/or manually install
--       --  other tools, you can run
--       --    :Mason
--       --
--       --  You can press `g?` for help in this menu.
--       require("mason").setup()
--
--       -- You can add other tools here that you want Mason to install
--       -- for you, so that they are available from within Neovim.
--       local ensure_installed = vim.tbl_keys(servers or {})
--       vim.list_extend(ensure_installed, {
--         "stylua", -- Used to format Lua code
--       })
--       require("mason-tool-installer").setup({ ensure_installed = ensure_installed })
--       require("mason-lspconfig").setup()
--
--       local lspconfig = require('lspconfig')
--       for server, config in pairs(opts.servers) do
--         -- passing config.capabilities to blink.cmp merges with the capabilities in your
--         -- `opts[server].capabilities, if you've defined it
--         config.capabilities = require('blink.cmp').get_lsp_capabilities(config.capabilities)
--         lspconfig[server].setup(config)
--       end
--     end,
--   },
}
-- vim: ts=2 sts=2 sw=2 et
